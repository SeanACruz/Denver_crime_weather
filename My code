{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nCc3XZEyG3XV"
   },
   "source": [
    "Lambda School Data Science\n",
    "\n",
    "*Unit 2, Sprint 3, Module 1*\n",
    "\n",
    "---\n",
    "\n",
    "\n",
    "# Define ML problems\n",
    "\n",
    "You will use your portfolio project dataset for all assignments this sprint.\n",
    "\n",
    "## Assignment\n",
    "\n",
    "Complete these tasks for your project, and document your decisions.\n",
    "\n",
    "- [ ] Choose your target. Which column in your tabular dataset will you predict?\n",
    "- [ ] Is your problem regression or classification?\n",
    "- [ ] How is your target distributed?\n",
    "    - Classification: How many classes? Are the classes imbalanced?\n",
    "    - Regression: Is the target right-skewed? If so, you may want to log transform the target.\n",
    "- [ ] Choose your evaluation metric(s).\n",
    "    - Classification: Is your majority class frequency >= 50% and < 70% ? If so, you can just use accuracy if you want. Outside that range, accuracy could be misleading. What evaluation metric will you choose, in addition to or instead of accuracy?\n",
    "    - Regression: Will you use mean absolute error, root mean squared error, R^2, or other regression metrics?\n",
    "- [ ] Choose which observations you will use to train, validate, and test your model.\n",
    "    - Are some observations outliers? Will you exclude them?\n",
    "    - Will you do a random split or a time-based split?\n",
    "- [ ] Begin to clean and explore your data.\n",
    "- [ ] Begin to choose which features, if any, to exclude. Would some features \"leak\" future information?\n",
    "\n",
    "If you haven't found a dataset yet, do that today. [Review requirements for your portfolio project](https://lambdaschool.github.io/ds/unit2) and choose your dataset.\n",
    "\n",
    "Some students worry, ***what if my model isn't “good”?*** Then, [produce a detailed tribute to your wrongness. That is science!](https://twitter.com/nathanwpyle/status/1176860147223867393)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "JKvk7iQMvw7n"
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set working directory.\n",
    "#os.chdir(main_dir)\n",
    "#main_dir = 'C:\\Users\\acer\\Desktop\\BuildweekCSVs'\n",
    "# Check working directory.\n",
    "#print(os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "LHCQvLWsv0P8"
   },
   "outputs": [],
   "source": [
    "#making starting dataframes\n",
    "df_crime= pd.read_csv('C:/Users/acer/Desktop/BuildweekCSVs/DenverCrime.csv',engine='python', encoding='utf-8', error_bad_lines=False).sample(frac=.001)\n",
    "df_humidity=pd.read_csv('C:/Users/acer/Desktop/BuildweekCSVs/humidity.csv')\n",
    "df_pressure=pd.read_csv('C:/Users/acer/Desktop/BuildweekCSVs/pressure.csv')\n",
    "df_temp=pd.read_csv('C:/Users/acer/Desktop/BuildweekCSVs/temperature.csv')\n",
    "#df_weath_desc=pd.read_csv('C:/Users/acer/Desktop/BuildweekCSVs/weather_description.csv').sample(frac=.01)\n",
    "#df_wind=pd.read_csv('C:/Users/acer/Desktop/BuildweekCSVs/wind_speed.csv').sample(frac=.01)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "HBvgWTzaJNBp"
   },
   "outputs": [],
   "source": [
    "#getting rid of hours mins and seconds\n",
    "df_humidity['datetime'] = pd.to_datetime(df_humidity['datetime']).dt.date\n",
    "df_pressure['datetime'] = pd.to_datetime(df_pressure['datetime']).dt.date\n",
    "df_temp['datetime'] = pd.to_datetime(df_temp['datetime']).dt.date\n",
    "#df_weath_desc['datetime'] = pd.to_datetime(df_weath_desc['datetime']).dt.date\n",
    "#df_wind['datetime'] = pd.to_datetime(df_wind['datetime']).dt.date\n",
    "\n",
    "#fixing nans\n",
    "df_humidity.drop(index=df_humidity.index[0], axis=0, inplace=True)\n",
    "df_pressure.drop(index=df_pressure.index[0], axis=0, inplace=True)\n",
    "df_temp.drop(index=df_temp.index[0], axis=0, inplace=True)\n",
    "#df_weath_desc.drop(index=df_weath_desc.index[0], axis=0, inplace=True)\n",
    "#df_wind.drop(index=df_wind.index[0], axis=0, inplace=True)\n",
    "\n",
    "df_humidity=df_humidity.fillna(df_humidity.mean())\n",
    "df_pressure=df_pressure.fillna(df_pressure.mean())\n",
    "df_temp=df_temp.fillna(df_temp.mean())\n",
    "#df_wind=df_wind.fillna(df_wind.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 327
    },
    "id": "Xmz37e0yJwyJ",
    "outputId": "17873c2d-d6a4-44a6-aa4e-5cc12e3ed05e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>Vancouver</th>\n",
       "      <th>Portland</th>\n",
       "      <th>San Francisco</th>\n",
       "      <th>Seattle</th>\n",
       "      <th>Los Angeles</th>\n",
       "      <th>San Diego</th>\n",
       "      <th>Las Vegas</th>\n",
       "      <th>Phoenix</th>\n",
       "      <th>Albuquerque</th>\n",
       "      <th>...</th>\n",
       "      <th>Philadelphia</th>\n",
       "      <th>New York</th>\n",
       "      <th>Montreal</th>\n",
       "      <th>Boston</th>\n",
       "      <th>Beersheba</th>\n",
       "      <th>Tel Aviv District</th>\n",
       "      <th>Eilat</th>\n",
       "      <th>Haifa</th>\n",
       "      <th>Nahariyya</th>\n",
       "      <th>Jerusalem</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>76.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>...</td>\n",
       "      <td>71.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>76.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>...</td>\n",
       "      <td>70.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>76.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>...</td>\n",
       "      <td>70.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>77.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>...</td>\n",
       "      <td>69.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>78.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>...</td>\n",
       "      <td>69.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     datetime  Vancouver  Portland  San Francisco  Seattle  Los Angeles  \\\n",
       "1  2012-10-01       76.0      81.0           88.0     81.0         88.0   \n",
       "2  2012-10-01       76.0      80.0           87.0     80.0         88.0   \n",
       "3  2012-10-01       76.0      80.0           86.0     80.0         88.0   \n",
       "4  2012-10-01       77.0      80.0           85.0     79.0         88.0   \n",
       "5  2012-10-01       78.0      79.0           84.0     79.0         88.0   \n",
       "\n",
       "   San Diego  Las Vegas  Phoenix  Albuquerque  ...  Philadelphia  New York  \\\n",
       "1       82.0       22.0     23.0         50.0  ...          71.0      58.0   \n",
       "2       81.0       21.0     23.0         49.0  ...          70.0      57.0   \n",
       "3       81.0       21.0     23.0         49.0  ...          70.0      57.0   \n",
       "4       81.0       21.0     23.0         49.0  ...          69.0      57.0   \n",
       "5       80.0       21.0     24.0         49.0  ...          69.0      57.0   \n",
       "\n",
       "   Montreal  Boston  Beersheba  Tel Aviv District  Eilat  Haifa  Nahariyya  \\\n",
       "1      93.0    68.0       50.0               63.0   22.0   51.0       51.0   \n",
       "2      91.0    68.0       51.0               62.0   22.0   51.0       51.0   \n",
       "3      87.0    68.0       51.0               62.0   22.0   51.0       51.0   \n",
       "4      84.0    68.0       52.0               62.0   22.0   51.0       51.0   \n",
       "5      80.0    68.0       54.0               62.0   23.0   51.0       51.0   \n",
       "\n",
       "   Jerusalem  \n",
       "1       50.0  \n",
       "2       50.0  \n",
       "3       50.0  \n",
       "4       50.0  \n",
       "5       50.0  \n",
       "\n",
       "[5 rows x 37 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_humidity.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "ZpQ2m0ZQ0fd6"
   },
   "outputs": [],
   "source": [
    "#getting rid of every city that isn't Denver\n",
    "df_humidity=df_humidity[['Denver','datetime']]\n",
    "df_pressure=df_pressure[['Denver','datetime']]\n",
    "df_temp=df_temp[['Denver','datetime']]\n",
    "#df_weath_desc=df_weath_desc[['Denver','datetime']]\n",
    "#df_wind=df_wind[['Denver','datetime']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "id": "fjiWF90y29Yv",
    "outputId": "218e5aab-2ebf-425a-cc2e-8a3ddb7233be"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Denver</th>\n",
       "      <th>datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>284.610000</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>284.607306</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>284.599918</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>284.592530</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>284.585142</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Denver    datetime\n",
       "1  284.610000  2012-10-01\n",
       "2  284.607306  2012-10-01\n",
       "3  284.599918  2012-10-01\n",
       "4  284.592530  2012-10-01\n",
       "5  284.585142  2012-10-01"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_temp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "2I4HEw32SUNZ"
   },
   "outputs": [],
   "source": [
    "df_humidity=df_humidity.rename(columns={'Denver':'Humidity'})\n",
    "df_pressure=df_pressure.rename(columns={'Denver':'Pressure'})\n",
    "df_temp=df_temp.rename(columns={'Denver':'Temp'})\n",
    "#df_weath_desc=df_weath_desc.rename(columns={'Denver':'Description'})\n",
    "#df_wind=df_wind.rename(columns={'Denver':'Wind Speed'})\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 310
    },
    "id": "z5qSFrG0il0x",
    "outputId": "7f7a0e82-44e5-43da-da89-89b0366d188c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>INCIDENT_ID</th>\n",
       "      <th>OFFENSE_ID</th>\n",
       "      <th>OFFENSE_CODE</th>\n",
       "      <th>OFFENSE_CODE_EXTENSION</th>\n",
       "      <th>OFFENSE_TYPE_ID</th>\n",
       "      <th>OFFENSE_CATEGORY_ID</th>\n",
       "      <th>FIRST_OCCURRENCE_DATE</th>\n",
       "      <th>LAST_OCCURRENCE_DATE</th>\n",
       "      <th>REPORTED_DATE</th>\n",
       "      <th>INCIDENT_ADDRESS</th>\n",
       "      <th>GEO_X</th>\n",
       "      <th>GEO_Y</th>\n",
       "      <th>GEO_LON</th>\n",
       "      <th>GEO_LAT</th>\n",
       "      <th>DISTRICT_ID</th>\n",
       "      <th>PRECINCT_ID</th>\n",
       "      <th>NEIGHBORHOOD_ID</th>\n",
       "      <th>IS_CRIME</th>\n",
       "      <th>IS_TRAFFIC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>361850</th>\n",
       "      <td>2018397761</td>\n",
       "      <td>2018397761351200</td>\n",
       "      <td>3512</td>\n",
       "      <td>0</td>\n",
       "      <td>drug-heroin-possess</td>\n",
       "      <td>drug-alcohol</td>\n",
       "      <td>6/13/2018 7:30:00 PM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6/13/2018 8:36:00 PM</td>\n",
       "      <td>1975 S COLORADO BLVD</td>\n",
       "      <td>3157141.0</td>\n",
       "      <td>1673369.0</td>\n",
       "      <td>-104.941688</td>\n",
       "      <td>39.680871</td>\n",
       "      <td>3</td>\n",
       "      <td>314</td>\n",
       "      <td>university-park</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>461840</th>\n",
       "      <td>20176011777</td>\n",
       "      <td>20176011777230400</td>\n",
       "      <td>2304</td>\n",
       "      <td>0</td>\n",
       "      <td>theft-parts-from-vehicle</td>\n",
       "      <td>theft-from-motor-vehicle</td>\n",
       "      <td>12/14/2017 7:25:00 AM</td>\n",
       "      <td>12/15/2017 7:25:00 AM</td>\n",
       "      <td>12/15/2017 7:39:00 AM</td>\n",
       "      <td>4300 BLK N SHERMAN ST</td>\n",
       "      <td>3144759.0</td>\n",
       "      <td>1708018.0</td>\n",
       "      <td>-104.984982</td>\n",
       "      <td>39.776190</td>\n",
       "      <td>1</td>\n",
       "      <td>112</td>\n",
       "      <td>globeville</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437823</th>\n",
       "      <td>2018413790</td>\n",
       "      <td>2018413790500600</td>\n",
       "      <td>5006</td>\n",
       "      <td>0</td>\n",
       "      <td>intimidation-of-a-witness</td>\n",
       "      <td>all-other-crimes</td>\n",
       "      <td>6/19/2018 8:00:00 AM</td>\n",
       "      <td>6/19/2018 8:30:00 AM</td>\n",
       "      <td>6/20/2018 3:13:00 PM</td>\n",
       "      <td>4404 MORRISON RD</td>\n",
       "      <td>3128131.0</td>\n",
       "      <td>1681130.0</td>\n",
       "      <td>-105.044619</td>\n",
       "      <td>39.702621</td>\n",
       "      <td>4</td>\n",
       "      <td>412</td>\n",
       "      <td>westwood</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>371725</th>\n",
       "      <td>2015439693</td>\n",
       "      <td>2015439693131500</td>\n",
       "      <td>1315</td>\n",
       "      <td>0</td>\n",
       "      <td>aggravated-assault</td>\n",
       "      <td>aggravated-assault</td>\n",
       "      <td>8/3/2015 9:20:00 AM</td>\n",
       "      <td>8/3/2015 9:54:00 AM</td>\n",
       "      <td>8/3/2015 9:54:00 AM</td>\n",
       "      <td>686 S PATTON CT</td>\n",
       "      <td>3129755.0</td>\n",
       "      <td>1681696.0</td>\n",
       "      <td>-105.038837</td>\n",
       "      <td>39.704152</td>\n",
       "      <td>4</td>\n",
       "      <td>412</td>\n",
       "      <td>westwood</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>334708</th>\n",
       "      <td>2016169612</td>\n",
       "      <td>2016169612542000</td>\n",
       "      <td>5420</td>\n",
       "      <td>0</td>\n",
       "      <td>traffic-accident-dui-duid</td>\n",
       "      <td>traffic-accident</td>\n",
       "      <td>3/17/2016 5:53:00 PM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3/17/2016 5:53:00 PM</td>\n",
       "      <td>LEETSDALE DR / S NIAGARA ST</td>\n",
       "      <td>3165853.0</td>\n",
       "      <td>1680785.0</td>\n",
       "      <td>-104.910565</td>\n",
       "      <td>39.701079</td>\n",
       "      <td>3</td>\n",
       "      <td>322</td>\n",
       "      <td>washington-virginia-vale</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        INCIDENT_ID         OFFENSE_ID  OFFENSE_CODE  OFFENSE_CODE_EXTENSION  \\\n",
       "361850   2018397761   2018397761351200          3512                       0   \n",
       "461840  20176011777  20176011777230400          2304                       0   \n",
       "437823   2018413790   2018413790500600          5006                       0   \n",
       "371725   2015439693   2015439693131500          1315                       0   \n",
       "334708   2016169612   2016169612542000          5420                       0   \n",
       "\n",
       "                  OFFENSE_TYPE_ID       OFFENSE_CATEGORY_ID  \\\n",
       "361850        drug-heroin-possess              drug-alcohol   \n",
       "461840   theft-parts-from-vehicle  theft-from-motor-vehicle   \n",
       "437823  intimidation-of-a-witness          all-other-crimes   \n",
       "371725         aggravated-assault        aggravated-assault   \n",
       "334708  traffic-accident-dui-duid          traffic-accident   \n",
       "\n",
       "        FIRST_OCCURRENCE_DATE   LAST_OCCURRENCE_DATE          REPORTED_DATE  \\\n",
       "361850   6/13/2018 7:30:00 PM                    NaN   6/13/2018 8:36:00 PM   \n",
       "461840  12/14/2017 7:25:00 AM  12/15/2017 7:25:00 AM  12/15/2017 7:39:00 AM   \n",
       "437823   6/19/2018 8:00:00 AM   6/19/2018 8:30:00 AM   6/20/2018 3:13:00 PM   \n",
       "371725    8/3/2015 9:20:00 AM    8/3/2015 9:54:00 AM    8/3/2015 9:54:00 AM   \n",
       "334708   3/17/2016 5:53:00 PM                    NaN   3/17/2016 5:53:00 PM   \n",
       "\n",
       "                   INCIDENT_ADDRESS      GEO_X      GEO_Y     GEO_LON  \\\n",
       "361850         1975 S COLORADO BLVD  3157141.0  1673369.0 -104.941688   \n",
       "461840        4300 BLK N SHERMAN ST  3144759.0  1708018.0 -104.984982   \n",
       "437823             4404 MORRISON RD  3128131.0  1681130.0 -105.044619   \n",
       "371725              686 S PATTON CT  3129755.0  1681696.0 -105.038837   \n",
       "334708  LEETSDALE DR / S NIAGARA ST  3165853.0  1680785.0 -104.910565   \n",
       "\n",
       "          GEO_LAT  DISTRICT_ID  PRECINCT_ID           NEIGHBORHOOD_ID  \\\n",
       "361850  39.680871            3          314           university-park   \n",
       "461840  39.776190            1          112                globeville   \n",
       "437823  39.702621            4          412                  westwood   \n",
       "371725  39.704152            4          412                  westwood   \n",
       "334708  39.701079            3          322  washington-virginia-vale   \n",
       "\n",
       "        IS_CRIME  IS_TRAFFIC  \n",
       "361850         1           0  \n",
       "461840         1           0  \n",
       "437823         1           0  \n",
       "371725         1           0  \n",
       "334708         0           1  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_crime.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "QTNkE7gX3jjw"
   },
   "outputs": [],
   "source": [
    "df_crime['datetime']=pd.to_datetime(df_crime['FIRST_OCCURRENCE_DATE']).dt.date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "wTSMQM5eKaTB"
   },
   "outputs": [],
   "source": [
    "df_crime['datetime']=pd.to_datetime(df_crime['datetime'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "bl633OeY4X0U",
    "outputId": "02c6a0b5-b378-4df9-d879-02b47ab15ec3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('<M8[ns]')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_crime['datetime'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(494, 20)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_crime.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_crime=df_crime[df_crime['datetime'].dt.year < 2016]\n",
    "df_crime=df_crime.sample(frac=.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 310
    },
    "id": "IZCTjcPEKH9y",
    "outputId": "00a924ae-c797-44bb-83bd-85f45cfb7e0b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>INCIDENT_ID</th>\n",
       "      <th>OFFENSE_ID</th>\n",
       "      <th>OFFENSE_CODE</th>\n",
       "      <th>OFFENSE_CODE_EXTENSION</th>\n",
       "      <th>OFFENSE_TYPE_ID</th>\n",
       "      <th>OFFENSE_CATEGORY_ID</th>\n",
       "      <th>FIRST_OCCURRENCE_DATE</th>\n",
       "      <th>LAST_OCCURRENCE_DATE</th>\n",
       "      <th>REPORTED_DATE</th>\n",
       "      <th>INCIDENT_ADDRESS</th>\n",
       "      <th>GEO_X</th>\n",
       "      <th>GEO_Y</th>\n",
       "      <th>GEO_LON</th>\n",
       "      <th>GEO_LAT</th>\n",
       "      <th>DISTRICT_ID</th>\n",
       "      <th>PRECINCT_ID</th>\n",
       "      <th>NEIGHBORHOOD_ID</th>\n",
       "      <th>IS_CRIME</th>\n",
       "      <th>IS_TRAFFIC</th>\n",
       "      <th>datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>265292</th>\n",
       "      <td>2014197704</td>\n",
       "      <td>2014197704230300</td>\n",
       "      <td>2303</td>\n",
       "      <td>0</td>\n",
       "      <td>theft-shoplift</td>\n",
       "      <td>larceny</td>\n",
       "      <td>4/19/2014 3:15:00 PM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4/19/2014 4:05:00 PM</td>\n",
       "      <td>757 E 20TH AVE</td>\n",
       "      <td>3146910.0</td>\n",
       "      <td>1697792.0</td>\n",
       "      <td>-104.977538</td>\n",
       "      <td>39.748084</td>\n",
       "      <td>6</td>\n",
       "      <td>621</td>\n",
       "      <td>five-points</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-04-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>393170</th>\n",
       "      <td>2015676194</td>\n",
       "      <td>2015676194531200</td>\n",
       "      <td>5312</td>\n",
       "      <td>0</td>\n",
       "      <td>disturbing-the-peace</td>\n",
       "      <td>public-disorder</td>\n",
       "      <td>11/19/2015 4:10:00 AM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11/19/2015 5:37:00 AM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3166599.0</td>\n",
       "      <td>1678838.0</td>\n",
       "      <td>-104.907959</td>\n",
       "      <td>39.695720</td>\n",
       "      <td>3</td>\n",
       "      <td>322</td>\n",
       "      <td>washington-virginia-vale</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-11-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274000</th>\n",
       "      <td>201516492</td>\n",
       "      <td>201516492549900</td>\n",
       "      <td>5499</td>\n",
       "      <td>0</td>\n",
       "      <td>traf-other</td>\n",
       "      <td>all-other-crimes</td>\n",
       "      <td>1/9/2015 5:58:00 PM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1/9/2015 6:38:00 PM</td>\n",
       "      <td>E 36TH AVE / N MARION ST</td>\n",
       "      <td>3148399.0</td>\n",
       "      <td>1704681.0</td>\n",
       "      <td>-104.972101</td>\n",
       "      <td>39.766972</td>\n",
       "      <td>2</td>\n",
       "      <td>211</td>\n",
       "      <td>cole</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>410753</th>\n",
       "      <td>2015468388</td>\n",
       "      <td>2015468388544100</td>\n",
       "      <td>5441</td>\n",
       "      <td>0</td>\n",
       "      <td>traffic-accident</td>\n",
       "      <td>traffic-accident</td>\n",
       "      <td>8/16/2015 12:38:00 PM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/16/2015 1:28:00 PM</td>\n",
       "      <td>I25 HWYNB / W 8TH AVE</td>\n",
       "      <td>3136459.0</td>\n",
       "      <td>1690899.0</td>\n",
       "      <td>-105.014836</td>\n",
       "      <td>39.729321</td>\n",
       "      <td>1</td>\n",
       "      <td>123</td>\n",
       "      <td>lincoln-park</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-08-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>273765</th>\n",
       "      <td>2014613750</td>\n",
       "      <td>2014613750240400</td>\n",
       "      <td>2404</td>\n",
       "      <td>0</td>\n",
       "      <td>theft-of-motor-vehicle</td>\n",
       "      <td>auto-theft</td>\n",
       "      <td>11/17/2014 9:30:00 PM</td>\n",
       "      <td>11/18/2014 7:15:00 AM</td>\n",
       "      <td>11/18/2014 7:21:00 AM</td>\n",
       "      <td>9210 E MANSFIELD AVE</td>\n",
       "      <td>3173933.0</td>\n",
       "      <td>1660583.0</td>\n",
       "      <td>-104.882338</td>\n",
       "      <td>39.645472</td>\n",
       "      <td>3</td>\n",
       "      <td>324</td>\n",
       "      <td>hampden-south</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-11-17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        INCIDENT_ID        OFFENSE_ID  OFFENSE_CODE  OFFENSE_CODE_EXTENSION  \\\n",
       "265292   2014197704  2014197704230300          2303                       0   \n",
       "393170   2015676194  2015676194531200          5312                       0   \n",
       "274000    201516492   201516492549900          5499                       0   \n",
       "410753   2015468388  2015468388544100          5441                       0   \n",
       "273765   2014613750  2014613750240400          2404                       0   \n",
       "\n",
       "               OFFENSE_TYPE_ID OFFENSE_CATEGORY_ID  FIRST_OCCURRENCE_DATE  \\\n",
       "265292          theft-shoplift             larceny   4/19/2014 3:15:00 PM   \n",
       "393170    disturbing-the-peace     public-disorder  11/19/2015 4:10:00 AM   \n",
       "274000              traf-other    all-other-crimes    1/9/2015 5:58:00 PM   \n",
       "410753        traffic-accident    traffic-accident  8/16/2015 12:38:00 PM   \n",
       "273765  theft-of-motor-vehicle          auto-theft  11/17/2014 9:30:00 PM   \n",
       "\n",
       "         LAST_OCCURRENCE_DATE          REPORTED_DATE  \\\n",
       "265292                    NaN   4/19/2014 4:05:00 PM   \n",
       "393170                    NaN  11/19/2015 5:37:00 AM   \n",
       "274000                    NaN    1/9/2015 6:38:00 PM   \n",
       "410753                    NaN   8/16/2015 1:28:00 PM   \n",
       "273765  11/18/2014 7:15:00 AM  11/18/2014 7:21:00 AM   \n",
       "\n",
       "                INCIDENT_ADDRESS      GEO_X      GEO_Y     GEO_LON    GEO_LAT  \\\n",
       "265292            757 E 20TH AVE  3146910.0  1697792.0 -104.977538  39.748084   \n",
       "393170                       NaN  3166599.0  1678838.0 -104.907959  39.695720   \n",
       "274000  E 36TH AVE / N MARION ST  3148399.0  1704681.0 -104.972101  39.766972   \n",
       "410753     I25 HWYNB / W 8TH AVE  3136459.0  1690899.0 -105.014836  39.729321   \n",
       "273765      9210 E MANSFIELD AVE  3173933.0  1660583.0 -104.882338  39.645472   \n",
       "\n",
       "        DISTRICT_ID  PRECINCT_ID           NEIGHBORHOOD_ID  IS_CRIME  \\\n",
       "265292            6          621               five-points         1   \n",
       "393170            3          322  washington-virginia-vale         1   \n",
       "274000            2          211                      cole         1   \n",
       "410753            1          123              lincoln-park         0   \n",
       "273765            3          324             hampden-south         1   \n",
       "\n",
       "        IS_TRAFFIC   datetime  \n",
       "265292           0 2014-04-19  \n",
       "393170           0 2015-11-19  \n",
       "274000           0 2015-01-09  \n",
       "410753           1 2015-08-16  \n",
       "273765           0 2014-11-17  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_crime.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8, 20)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_crime.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 110
    },
    "id": "aVBKdiNYzZtU",
    "outputId": "f9c17e02-25ab-4b19-ef98-7ad457882709"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Humidity</th>\n",
       "      <th>datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Humidity    datetime\n",
       "1      62.0  2012-10-01\n",
       "2      62.0  2012-10-01"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#seeing what the weather dataframes looklike\n",
    "df_humidity.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "id": "o1uMKGul1nN8",
    "outputId": "0156b84c-28da-4abd-fbcc-cff36b9f03da"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Humidity</th>\n",
       "      <th>datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>63.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Humidity    datetime\n",
       "1      62.0  2012-10-01\n",
       "2      62.0  2012-10-01\n",
       "3      62.0  2012-10-01\n",
       "4      62.0  2012-10-01\n",
       "5      63.0  2012-10-01"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#making sure it worked\n",
    "df_humidity.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "tUmQzA5TCHg8",
    "outputId": "5be89f5f-af04-437f-ac6c-e0984b44cb95"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['INCIDENT_ID', 'OFFENSE_ID', 'OFFENSE_CODE', 'OFFENSE_CODE_EXTENSION',\n",
       "       'OFFENSE_TYPE_ID', 'OFFENSE_CATEGORY_ID', 'FIRST_OCCURRENCE_DATE',\n",
       "       'LAST_OCCURRENCE_DATE', 'REPORTED_DATE', 'INCIDENT_ADDRESS', 'GEO_X',\n",
       "       'GEO_Y', 'GEO_LON', 'GEO_LAT', 'DISTRICT_ID', 'PRECINCT_ID',\n",
       "       'NEIGHBORHOOD_ID', 'IS_CRIME', 'IS_TRAFFIC', 'datetime'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_crime.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "id": "9mLB8Rg_B07n"
   },
   "outputs": [],
   "source": [
    "#getting rid of columns from df_crime that I decided are useless\n",
    "df_crime=df_crime.drop(columns=['INCIDENT_ID','OFFENSE_ID','OFFENSE_CODE','OFFENSE_CODE_EXTENSION','FIRST_OCCURRENCE_DATE',\n",
    "                                'LAST_OCCURRENCE_DATE','GEO_X','GEO_Y', 'GEO_LON', 'GEO_LAT', 'DISTRICT_ID', 'PRECINCT_ID',\n",
    "                                'NEIGHBORHOOD_ID','REPORTED_DATE', 'INCIDENT_ADDRESS'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "id": "ANAt2v3JCqV5",
    "outputId": "7b8a7d35-9d72-4742-ec82-78e37af7d516"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OFFENSE_TYPE_ID</th>\n",
       "      <th>OFFENSE_CATEGORY_ID</th>\n",
       "      <th>IS_CRIME</th>\n",
       "      <th>IS_TRAFFIC</th>\n",
       "      <th>datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>265292</th>\n",
       "      <td>theft-shoplift</td>\n",
       "      <td>larceny</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-04-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>393170</th>\n",
       "      <td>disturbing-the-peace</td>\n",
       "      <td>public-disorder</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-11-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274000</th>\n",
       "      <td>traf-other</td>\n",
       "      <td>all-other-crimes</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>410753</th>\n",
       "      <td>traffic-accident</td>\n",
       "      <td>traffic-accident</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-08-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>273765</th>\n",
       "      <td>theft-of-motor-vehicle</td>\n",
       "      <td>auto-theft</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-11-17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               OFFENSE_TYPE_ID OFFENSE_CATEGORY_ID  IS_CRIME  IS_TRAFFIC  \\\n",
       "265292          theft-shoplift             larceny         1           0   \n",
       "393170    disturbing-the-peace     public-disorder         1           0   \n",
       "274000              traf-other    all-other-crimes         1           0   \n",
       "410753        traffic-accident    traffic-accident         0           1   \n",
       "273765  theft-of-motor-vehicle          auto-theft         1           0   \n",
       "\n",
       "         datetime  \n",
       "265292 2014-04-19  \n",
       "393170 2015-11-19  \n",
       "274000 2015-01-09  \n",
       "410753 2015-08-16  \n",
       "273765 2014-11-17  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_crime.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 273
    },
    "id": "V_XGq3NCDVrz",
    "outputId": "e1633a55-a97b-4cde-fb00-6808d7343234"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['theft-shoplift' 'disturbing-the-peace' 'traf-other' 'traffic-accident'\n",
      " 'theft-of-motor-vehicle']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OFFENSE_TYPE_ID</th>\n",
       "      <th>datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>265292</th>\n",
       "      <td>theft-shoplift</td>\n",
       "      <td>2014-04-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>393170</th>\n",
       "      <td>disturbing-the-peace</td>\n",
       "      <td>2015-11-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274000</th>\n",
       "      <td>traf-other</td>\n",
       "      <td>2015-01-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>410753</th>\n",
       "      <td>traffic-accident</td>\n",
       "      <td>2015-08-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>273765</th>\n",
       "      <td>theft-of-motor-vehicle</td>\n",
       "      <td>2014-11-17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               OFFENSE_TYPE_ID   datetime\n",
       "265292          theft-shoplift 2014-04-19\n",
       "393170    disturbing-the-peace 2015-11-19\n",
       "274000              traf-other 2015-01-09\n",
       "410753        traffic-accident 2015-08-16\n",
       "273765  theft-of-motor-vehicle 2014-11-17"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Seeing whats in my target column\n",
    "print(df_crime['OFFENSE_TYPE_ID'].unique())\n",
    "#Getting rid of coumns that could cause leaks\n",
    "df_crime=df_crime.drop(columns=['OFFENSE_CATEGORY_ID','IS_CRIME','IS_TRAFFIC'])\n",
    "df_crime.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "id": "cZDNtF_VLNOd"
   },
   "outputs": [],
   "source": [
    "weather=pd.merge(left=df_humidity,right=df_pressure,on='datetime',how='outer')\n",
    "weather=pd.merge(left=weather,right=df_temp,on='datetime',how='outer')\n",
    "#weather=pd.merge(left=weather,right=df_weath_desc,on='datetime',how='outer')\n",
    "#weather=pd.merge(left=weather,right=df_wind,on='datetime',how='outer')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "id": "tKQ89RNtL9iu",
    "outputId": "108a4d18-13e6-4025-ff39-f06f41f0754f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Humidity</th>\n",
       "      <th>datetime</th>\n",
       "      <th>Pressure</th>\n",
       "      <th>Temp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.610000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.607306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.599918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.592530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.585142</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Humidity    datetime  Pressure        Temp\n",
       "0      62.0  2012-10-01    1028.0  284.610000\n",
       "1      62.0  2012-10-01    1028.0  284.607306\n",
       "2      62.0  2012-10-01    1028.0  284.599918\n",
       "3      62.0  2012-10-01    1028.0  284.592530\n",
       "4      62.0  2012-10-01    1028.0  284.585142"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "KMhoLw78fBg_",
    "outputId": "875da57c-c7c6-43d6-bb94-581941e41f01"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([284.61      , 284.60730553, 284.5999178 , ..., 273.86436101,\n",
       "       273.29355098, 275.63786459])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather['Temp'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "id": "eStLPKFuZU_e"
   },
   "outputs": [],
   "source": [
    "weather['datetime']=pd.to_datetime(weather['datetime'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "id": "jT7mlHeXX1kY"
   },
   "outputs": [],
   "source": [
    "crime_weather=pd.merge(left=weather,right=df_crime,on='datetime',how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "id": "G79Yv66vYxol"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Humidity</th>\n",
       "      <th>datetime</th>\n",
       "      <th>Pressure</th>\n",
       "      <th>Temp</th>\n",
       "      <th>OFFENSE_TYPE_ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.610000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.607306</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.599918</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.592530</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>62.0</td>\n",
       "      <td>2012-10-01</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.585142</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Humidity   datetime  Pressure        Temp OFFENSE_TYPE_ID\n",
       "0      62.0 2012-10-01    1028.0  284.610000             NaN\n",
       "1      62.0 2012-10-01    1028.0  284.607306             NaN\n",
       "2      62.0 2012-10-01    1028.0  284.599918             NaN\n",
       "3      62.0 2012-10-01    1028.0  284.592530             NaN\n",
       "4      62.0 2012-10-01    1028.0  284.585142             NaN"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_weather.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "id": "MWePWZJQZqQW"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([nan, 'traffic-accident', 'traf-other', 'theft-shoplift',\n",
       "       'theft-of-motor-vehicle', 'disturbing-the-peace'], dtype=object)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_weather['OFFENSE_TYPE_ID'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "id": "V0w0c0-5aAiR"
   },
   "outputs": [],
   "source": [
    "crime_weather=crime_weather.set_index('datetime')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "id": "McEmDzoqaKlu"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Pressure</th>\n",
       "      <th>Temp</th>\n",
       "      <th>OFFENSE_TYPE_ID</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2012-10-01</th>\n",
       "      <td>62.0</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.610000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-10-01</th>\n",
       "      <td>62.0</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.607306</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-10-01</th>\n",
       "      <td>62.0</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.599918</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-10-01</th>\n",
       "      <td>62.0</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.592530</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-10-01</th>\n",
       "      <td>62.0</td>\n",
       "      <td>1028.0</td>\n",
       "      <td>284.585142</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Humidity  Pressure        Temp OFFENSE_TYPE_ID\n",
       "datetime                                                  \n",
       "2012-10-01      62.0    1028.0  284.610000             NaN\n",
       "2012-10-01      62.0    1028.0  284.607306             NaN\n",
       "2012-10-01      62.0    1028.0  284.599918             NaN\n",
       "2012-10-01      62.0    1028.0  284.592530             NaN\n",
       "2012-10-01      62.0    1028.0  284.585142             NaN"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_weather.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "id": "OYz_4aAEbyhF"
   },
   "outputs": [],
   "source": [
    "crime_weather.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "id": "_5u6JJzrb3Up"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Pressure</th>\n",
       "      <th>Temp</th>\n",
       "      <th>OFFENSE_TYPE_ID</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2014-03-01</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>276.13</td>\n",
       "      <td>traffic-accident</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-03-01</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>274.30</td>\n",
       "      <td>traffic-accident</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-03-01</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>272.74</td>\n",
       "      <td>traffic-accident</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-03-01</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>272.17</td>\n",
       "      <td>traffic-accident</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-03-01</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>271.12</td>\n",
       "      <td>traffic-accident</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Humidity  Pressure    Temp   OFFENSE_TYPE_ID\n",
       "datetime                                                \n",
       "2014-03-01      56.0    1006.0  276.13  traffic-accident\n",
       "2014-03-01      56.0    1006.0  274.30  traffic-accident\n",
       "2014-03-01      56.0    1006.0  272.74  traffic-accident\n",
       "2014-03-01      56.0    1006.0  272.17  traffic-accident\n",
       "2014-03-01      56.0    1006.0  271.12  traffic-accident"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_weather.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "id": "VJIS6xhle1T3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(110592, 4)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_weather.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['traffic-accident', 'traf-other', 'theft-shoplift',\n",
       "       'theft-of-motor-vehicle', 'disturbing-the-peace'], dtype=object)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_weather['OFFENSE_TYPE_ID'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=crime_weather.drop(columns='OFFENSE_TYPE_ID')\n",
    "y=crime_weather['OFFENSE_TYPE_ID']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#spliting the data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=17)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install category-encoders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Pressure</th>\n",
       "      <th>Temp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2014-11-17</th>\n",
       "      <td>62.000000</td>\n",
       "      <td>1047.0</td>\n",
       "      <td>272.212000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-04-19</th>\n",
       "      <td>53.022557</td>\n",
       "      <td>1014.0</td>\n",
       "      <td>285.390000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-11-19</th>\n",
       "      <td>68.000000</td>\n",
       "      <td>1017.0</td>\n",
       "      <td>269.070000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-11-19</th>\n",
       "      <td>51.000000</td>\n",
       "      <td>1017.0</td>\n",
       "      <td>279.170063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-08-16</th>\n",
       "      <td>36.000000</td>\n",
       "      <td>1022.0</td>\n",
       "      <td>293.920000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Humidity  Pressure        Temp\n",
       "datetime                                   \n",
       "2014-11-17  62.000000    1047.0  272.212000\n",
       "2014-04-19  53.022557    1014.0  285.390000\n",
       "2015-11-19  68.000000    1017.0  269.070000\n",
       "2015-11-19  51.000000    1017.0  279.170063\n",
       "2015-08-16  36.000000    1022.0  293.920000"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\acer\\anaconda3\\lib\\site-packages\\category_encoders\\utils.py:21: FutureWarning: is_categorical is deprecated and will be removed in a future version.  Use is_categorical_dtype instead\n",
      "  elif pd.api.types.is_categorical(cols):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('onehotencoder', OneHotEncoder(cols=[], use_cat_names=True)),\n",
       "                ('simpleimputer', SimpleImputer()),\n",
       "                ('randomforestclassifier',\n",
       "                 RandomForestClassifier(n_jobs=-1, random_state=42))])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importing things\n",
    "import category_encoders as ce\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from category_encoders import OrdinalEncoder\n",
    "from sklearn.impute import  SimpleImputer\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.feature_selection import f_regression, SelectKBest\n",
    "from sklearn.linear_model import Ridge\n",
    "#making random forest\n",
    "model =   make_pipeline(\n",
    "    ce.OneHotEncoder(use_cat_names=True), \n",
    "    SimpleImputer(strategy='mean'),\n",
    "    RandomForestClassifier(n_jobs=-1, random_state=42)\n",
    ")\n",
    "model.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Forest Training Accuracy Score: 1.0\n",
      "ForestmValidation Accuracy Score: 0.9968215694870671\n"
     ]
    }
   ],
   "source": [
    "#checking accuracy of my random forest model\n",
    "Forest_training_acc = model.score(X_train, y_train)\n",
    "Forest_val_acc = model.score(X_test,y_test)\n",
    "\n",
    "print('Forest Training Accuracy Score:', Forest_training_acc)\n",
    "print('ForestmValidation Accuracy Score:', Forest_val_acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Random Forest')"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import plot_confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams.update({'font.size': 15})\n",
    "plt.rcParams['text.color']='black'\n",
    "plt.rc('axes', labelsize=20)\n",
    "plt.rc('xtick', labelsize=12)\n",
    "plt.rc('ytick', labelsize=12)\n",
    "fig, ax = plt.subplots(1,1,figsize=(8,8))\n",
    "plot_confusion_matrix(model, X_test, y_test, cmap=plt.cm.Blues, ax=ax, values_format='.0f',xticks_rotation='vertical')\n",
    "plt.grid(False)\n",
    "plt.title('Random Forest',fontsize=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "traffic-accident          41472\n",
       "traf-other                27648\n",
       "disturbing-the-peace      13824\n",
       "theft-of-motor-vehicle    13824\n",
       "theft-shoplift            13824\n",
       "Name: OFFENSE_TYPE_ID, dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_weather['OFFENSE_TYPE_ID'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#establish baseline\n",
    "baseline=len(crime_weather[crime_weather['OFFENSE_TYPE_ID']=='traffic-accident'])/(crime_weather['OFFENSE_TYPE_ID'].value_counts().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.375\n"
     ]
    }
   ],
   "source": [
    "print(baseline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4444444444444444"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('simpleimputer', SimpleImputer()),\n",
       "                ('standardscaler', StandardScaler()),\n",
       "                ('logisticregression', LogisticRegression())])"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importing more things\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "#make a linear model(logistic regression)\n",
    "encoder=ce.OneHotEncoder(use_cat_names=True)\n",
    "model_logr = make_pipeline(SimpleImputer(strategy='mean'),StandardScaler(),LogisticRegression())\n",
    "model_logr.fit(X_train,y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Logestic Regression')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams.update({'font.size': 15})\n",
    "plt.rcParams['text.color']='black'\n",
    "plt.rc('axes', labelsize=20)\n",
    "plt.rc('xtick', labelsize=12)\n",
    "plt.rc('ytick', labelsize=12)\n",
    "fig, ax = plt.subplots(1,1,figsize=(8,8))\n",
    "plot_confusion_matrix(model_logr, X_test, y_test, cmap=plt.cm.Blues, ax=ax, values_format='.0f',xticks_rotation='vertical')\n",
    "plt.grid(False)\n",
    "plt.title('Logestic Regression',fontsize=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logestic Regression Training Accuracy Score: 0.7228595335780609\n",
      "Logistic Regression Validation Accuracy Score: 0.7242985532661114\n"
     ]
    }
   ],
   "source": [
    "logr_training_acc = model_logr.score(X_train, y_train)\n",
    "logr_val_acc = model_logr.score(X_test,y_test)\n",
    "\n",
    "print('Logestic Regression Training Accuracy Score:', logr_training_acc)\n",
    "print('Logistic Regression Validation Accuracy Score:', logr_val_acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Pressure</th>\n",
       "      <th>Temp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2014-11-17</th>\n",
       "      <td>62.000000</td>\n",
       "      <td>1047.0</td>\n",
       "      <td>272.212000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-04-19</th>\n",
       "      <td>53.022557</td>\n",
       "      <td>1014.0</td>\n",
       "      <td>285.390000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-11-19</th>\n",
       "      <td>68.000000</td>\n",
       "      <td>1017.0</td>\n",
       "      <td>269.070000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-11-19</th>\n",
       "      <td>51.000000</td>\n",
       "      <td>1017.0</td>\n",
       "      <td>279.170063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-08-16</th>\n",
       "      <td>36.000000</td>\n",
       "      <td>1022.0</td>\n",
       "      <td>293.920000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Humidity  Pressure        Temp\n",
       "datetime                                   \n",
       "2014-11-17  62.000000    1047.0  272.212000\n",
       "2014-04-19  53.022557    1014.0  285.390000\n",
       "2015-11-19  68.000000    1017.0  269.070000\n",
       "2015-11-19  51.000000    1017.0  279.170063\n",
       "2015-08-16  36.000000    1022.0  293.920000"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x180 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "encoder = model.named_steps['onehotencoder']\n",
    "encoded = encoder.transform(X_train)\n",
    "rf = model.named_steps['randomforestclassifier']\n",
    "importances = pd.Series(rf.feature_importances_, encoded.columns)\n",
    "\n",
    "n=5\n",
    "plt.figure(figsize=(10,n/2))\n",
    "importances.sort_values()[-n:].plot.barh();\n",
    "plt.title('Features By Importances')\n",
    "plt.savefig('featurebyimportances.png',bbox_inches='tight')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\acer\\\\Downloads'"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Pressure</th>\n",
       "      <th>Temp</th>\n",
       "      <th>OFFENSE_TYPE_ID</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2014-03-01</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>276.13</td>\n",
       "      <td>traffic-accident</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-03-01</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>274.30</td>\n",
       "      <td>traffic-accident</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-03-01</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>272.74</td>\n",
       "      <td>traffic-accident</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-03-01</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>272.17</td>\n",
       "      <td>traffic-accident</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-03-01</th>\n",
       "      <td>56.0</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>271.12</td>\n",
       "      <td>traffic-accident</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Humidity  Pressure    Temp   OFFENSE_TYPE_ID\n",
       "datetime                                                \n",
       "2014-03-01      56.0    1006.0  276.13  traffic-accident\n",
       "2014-03-01      56.0    1006.0  274.30  traffic-accident\n",
       "2014-03-01      56.0    1006.0  272.74  traffic-accident\n",
       "2014-03-01      56.0    1006.0  272.17  traffic-accident\n",
       "2014-03-01      56.0    1006.0  271.12  traffic-accident"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_weather.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Humidity (%)')"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,5))\n",
    "\n",
    "ax = sns.violinplot(x=\"Humidity\", y=\"OFFENSE_TYPE_ID\", data=crime_weather, scale='width')\n",
    "plt.title('Humidity (%)', fontsize=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Pressure (hPa)')"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,5))\n",
    "ax = sns.violinplot(x=\"Pressure\", y=\"OFFENSE_TYPE_ID\", data=crime_weather,scale='width')\n",
    "plt.title('Pressure (hPa)', fontsize=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Temp (K)')"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,5))\n",
    "ax = sns.violinplot(x=\"Temp\", y=\"OFFENSE_TYPE_ID\", data=crime_weather,scale='width')\n",
    "plt.title('Temp (K)', fontsize=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "Sean_Cruz_LS_DS_231_assignment.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
